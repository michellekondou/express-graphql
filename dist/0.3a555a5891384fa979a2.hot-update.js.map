{"version":3,"sources":["webpack:///./api/restRouter.js"],"names":["require","sortBy","split","zipObject","endpoint","toJSON","res","json","namePrefix","users","fetch","then","data","forEach","match","exec","t","name","replace","el","lastName","user","id","userPosts","postComments","countPostsPerUser","args","length","countCommentsPerUser","userPostIds","map","obj","formatPostIds","result","join"],"mappings":"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","file":"0.3a555a5891384fa979a2.hot-update.js","sourcesContent":["const { sortBy, split, zipObject } = require('lodash');\r\n\r\n// data\r\nconst endpoint = 'http://jsonplaceholder.typicode.com'\r\nconst toJSON = res => res.json();\r\n\r\nconst namePrefix = /(Mr|MR|Ms|Miss|Mrs|Dr|Sir)(\\.?)\\s/;\r\n//resolver functions\r\nconst users = () => fetch(`${endpoint}/users`).then(toJSON).then(data => {\r\n    data.forEach(t => {\r\n        const match = namePrefix.exec(t.name);\r\n        (match !== null) ? t.name = t.name.replace(match[0], \"\") : t.name = t.name;\r\n        t.name = split(t.name, ' ');\r\n        t.name = zipObject(['firstName', 'lastName'], [t.name[0], t.name[1]]);\r\n    })\r\n    return sortBy(data, (el) => el.name.lastName)\r\n})\r\n\r\nconst user = (users, { id }) => fetch(`${endpoint}/users/${id}`).then(toJSON).then(data => {\r\n    const match = namePrefix.exec(data.name);\r\n    (match !== null) ? data.name = data.name.replace(match[0], \"\") : data.name = data.name;\r\n    data.name = split(data.name, ' ');\r\n    data.name = zipObject(['firstName', 'lastName'], [data.name[0], data.name[1]]);\r\n    return data\r\n})\r\n\r\nconst userPosts = ({ id }) => fetch(`${endpoint}/users/${id}/posts`).then(toJSON)\r\n\r\nconst postComments = ({ id }) => fetch(`${endpoint}/posts/${id}/comments`).then(toJSON)\r\n\r\nconst countPostsPerUser = (args) => {\r\n    const { id } = args\r\n    return fetch(`${endpoint}/users/${id}/posts`)\r\n        .then(toJSON)\r\n        .then(data => {\r\n            return data.length\r\n        })\r\n}\r\n\r\nconst countCommentsPerUser = (args) => {\r\n    const { id } = args\r\n    return fetch(`${endpoint}/users/${id}/posts`)\r\n        .then(toJSON)\r\n        .then(data => {\r\n            var userPostIds = data.map(obj => obj.id)\r\n            var formatPostIds = userPostIds.map(id => 'postId=' + id)\r\n            var result = formatPostIds.join('&')\r\n\r\n            return fetch(`${endpoint}/comments?` + result)\r\n                .then(toJSON)\r\n                .then(data => data.length)\r\n        })\r\n}\r\n\r\nexport { users, user, userPosts, postComments, countPostsPerUser, countCommentsPerUser }\n\n\n// WEBPACK FOOTER //\n// ./api/restRouter.js"],"sourceRoot":""}